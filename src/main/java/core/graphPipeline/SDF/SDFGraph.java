package core.graphPipeline.SDF;

import core.graphPipeline.basic.Vertex;
import core.graphPipeline.graphSymbol.Symbol;
import core.graphPipeline.graphSymbol.SymbolTable;
import core.graphPipeline.basic.SGraph;
import org.apache.log4j.Logger;

import java.util.*;


public class SDFGraph extends SGraph {
    private String sourceIdCol, targetIdCol;
    //SDFGraph outputFields are generated by sourceSDF and targetSDF logically
    private Set<String> sourceSDFOutputs, targetSDFOutputs;

    public SDFGraph(String sourceIdCol, String targetIdCol) throws Exception {
        super();
        sourceSDFOutputs = new HashSet<>();
        targetSDFOutputs = new HashSet<>();
        this.sourceIdCol = sourceIdCol;
        addInputField(sourceIdCol);
        this.targetIdCol = targetIdCol;
        addInputField(targetIdCol);

    }

    /**
     * Assign values to the SDF input thus it can read dataFrames as user wish. The
     *
     * @param symbolValueMap A map between symbol name and symbol value. Symbol name refer to the
     *                       symbols of SDF IOTable.
     */
    public void configSDF(Map<String, String> symbolValueMap) {
        for (String symbolName : symbolValueMap.keySet()) {
            Symbol symbol = getInputTable().getSymbolByVarName(symbolName);
            SymbolTable.setInputSymbolValue(symbol, symbolValueMap.get(symbolName));
        }
    }

    public String getSourceIdCol() {
        return sourceIdCol;
    }

    public String getTargetIdCol() {
        return targetIdCol;
    }

    @Override
    public void addNode(Vertex vertex) {
        assert vertex instanceof SDFNode || vertex instanceof SDFGraph;
        super.addNode(vertex);
    }

    @Override
    public void removeNode(Vertex vertex) {
        assert vertex instanceof SDFNode || vertex instanceof SDFGraph;
        super.removeNode(vertex);
    }

    @Override
    public void connect(Vertex v1, String symbolName1, Vertex v2, String symbolName2) {
        super.connect(v1, symbolName1, v2, symbolName2);
        if (v2.equals(this.sinkNode)) {
            if (v1 instanceof SDFNode) {
                SDFNode sdfNode = (SDFNode) v1;
                if (sdfNode.getType().equals(SDFNode.SDFNodeType.SOURCE_ART_SDF)) {
                    sourceSDFOutputs.add(symbolName2);
                } else if (sdfNode.getType().equals(SDFNode.SDFNodeType.TARGET_ART_SDF)) {
                    targetSDFOutputs.add(symbolName2);
                } else {
                    Logger.getLogger(this.getClass().getName()).error(String.format("SDFNode %s type not assigned", sdfNode.getVertexId()));
                }
            } else {
                SDFGraph sdfGraph = (SDFGraph) v1;
                if (sdfGraph.getSourceSDFOutputs().contains(symbolName1)) {
                    sourceSDFOutputs.add(symbolName2);
                } else if (sdfGraph.getTargetSDFOutputs().contains(symbolName1)) {
                    targetSDFOutputs.add(symbolName2);
                } else {
                    Logger.getLogger(this.getClass().getName()).error(String.format("SDF output %s not belong to source or target!", symbolName2));
                }
            }
        }
    }

    @Override
    public void disconnect(Vertex v1, String symbolName1, Vertex v2, String symbolName2) {
        super.disconnect(v1, symbolName1, v2, symbolName2);
        if (v2.equals(this.sinkNode)) {
            if (v1 instanceof SDFNode) {
                SDFNode sdfNode = (SDFNode) v1;
                if (sdfNode.getType().equals(SDFNode.SDFNodeType.SOURCE_ART_SDF)) {
                    sourceSDFOutputs.remove(symbolName2);
                } else if (sdfNode.getType().equals(SDFNode.SDFNodeType.TARGET_ART_SDF)) {
                    targetSDFOutputs.remove(symbolName2);
                } else {
                    Logger.getLogger(this.getClass().getName()).error(String.format("SDFNode %s type not assigned", sdfNode.getVertexId()));
                }
            } else {
                SDFGraph sdfGraph = (SDFGraph) v1;
                if (sdfGraph.getSourceSDFOutputs().contains(symbolName1)) {
                    sourceSDFOutputs.remove(symbolName2);
                } else if (sdfGraph.getTargetSDFOutputs().contains(symbolName1)) {
                    targetSDFOutputs.remove(symbolName2);
                } else {
                    Logger.getLogger(this.getClass().getName()).error(String.format("SDF output %s not belong to source or target!", symbolName2));
                }
            }
        }
    }

    public Set<String> getSourceSDFOutputs() {
        return sourceSDFOutputs;
    }

    public void setSourceSDFOutputs(Set<String> sourceSDFOutputs) {
        this.sourceSDFOutputs = sourceSDFOutputs;
    }

    public Set<String> getTargetSDFOutputs() {
        return targetSDFOutputs;
    }

    public void setTargetSDFOutputs(Set<String> targetSDFOutputs) {
        this.targetSDFOutputs = targetSDFOutputs;
    }
}
