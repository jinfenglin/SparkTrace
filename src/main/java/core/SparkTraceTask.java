package core;

import featurePipeline.TraceModelPipeline;
import org.apache.spark.ml.*;
import org.apache.spark.ml.param.Param;
import org.apache.spark.ml.param.ParamMap;
import org.apache.spark.sql.Column;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import traceability.components.abstractComponents.TraceArtifact;
import traceability.components.abstractComponents.TraceLink;


/**
 * Each spark trace task (STT) will keep the sourceArtifact, target artifact and gold links. When a STT is nested in a
 * pipeline, it need to run the SDFPipelines and DDFPipelines since the field/column in dataset it needs may not be generated by
 * the parent STT. If STT is generating same field as its parent, parent's field will be applied and the calculation will
 * be skipped. This feature can be configured through parameters
 */
public class SparkTraceTask extends Predictor {
    private static final long serialVersionUID = 7229590480653993971L;
    public final static String SOURCE_PREFIX = "source";
    public final static String TARGET_PREFIX = "target";
    public final static String ID_COL_NAME = "id";

    private String sourceArtifactIdColName, targetArtifactIdColName;

    private Pipeline sourceSDFPipeline, targetSDFPipeline;
    private Pipeline ddfPipeline;
    private Predictor predictor;

    //Data fields
//    private Dataset<? extends TraceArtifact> sourceArtifacts, targetArtifacts;
//    Dataset<? extends TraceLink> goldenLinks;


    //Task parameters
    //final Param<String> sourceArtifactIdColName = new Param<String>(this, "sourceIdColName", "Name of the id column for source artifacts dataset");
    //final Param<String> targetArtifactIdColName = new Param<String>(this, "targetIdColName", "Name of the id column for target artifacts dataset");

    public SparkTraceTask(Dataset<? extends TraceArtifact> sourceArtifacts,
                          Dataset<? extends TraceArtifact> targetArtifacts,
                          Dataset<? extends TraceLink> goldenLinks) {
//        this.sourceArtifacts = sourceArtifacts;
//        this.targetArtifacts = targetArtifacts;
//        this.goldenLinks = goldenLinks;

        //Init Param
        String defaultSourceIdColName = String.join("_", SOURCE_PREFIX, ID_COL_NAME);
        String defaultTargetIdColName = String.join("_", TARGET_PREFIX, ID_COL_NAME);
        sourceArtifactIdColName = defaultSourceIdColName;
        targetArtifactIdColName = defaultTargetIdColName;
    }


    @Override
    public Predictor copy(ParamMap paramMap) {
        return defaultCopy(paramMap);
    }

    @Override
    public PredictionModel train(Dataset goldLinksWithFeatureVec) {

        //Process the document with SDF pipeline
//        PipelineModel sourceSDFModel = sourceSDFPipeline.fit(sourceArtifacts);
//        PipelineModel targetSDFModel = targetSDFPipeline.fit(targetArtifacts);
//        Dataset<Row> sourceSDFeatureVecs = sourceSDFModel.transform(sourceArtifacts);
//        Dataset<Row> targetSDFeatureVecs = targetSDFModel.transform(targetArtifacts);
//
//        Dataset<Row> goldLinksWithFeatureVec = appendFeaturesToLinks(goldenLinks.toDF(), sourceSDFeatureVecs, targetSDFeatureVecs);
        PipelineModel ddfModel = ddfPipeline.fit(goldLinksWithFeatureVec);

        Dataset<Row> fullFeatures = ddfModel.transform(goldLinksWithFeatureVec);
        PredictionModel predictionModel = predictor.train(fullFeatures);
        SparkTraceTaskModel traceModel = new SparkTraceTaskModel(ddfModel, predictionModel);
        return traceModel;
    }

    @Override
    public String uid() {
        return this.getClass().getName() + serialVersionUID;
    }

    private Dataset<Row> appendFeaturesToLinks(Dataset<Row> links, Dataset<Row> sourceFeatures, Dataset<Row> targetFeatures) {
        Column sourceArtifactIdCol = sourceFeatures.col(getSourceArtifactColName());
        Column targetArtifactIdCol = targetFeatures.col(getTargetArtifactColName());

        Column linkSourceIdCol = links.col(getSourceArtifactColName());
        Column linkTargetIdCol = links.col(getTargetArtifactColName());

        Dataset<Row> linksWithFeatureVec = links.join(sourceFeatures, sourceArtifactIdCol.equalTo(linkSourceIdCol));
        linksWithFeatureVec = linksWithFeatureVec.join(targetFeatures, targetArtifactIdCol.equalTo(linkTargetIdCol));
        linksWithFeatureVec = linksWithFeatureVec.drop(sourceArtifactIdCol).drop(targetArtifactIdCol);
        return linksWithFeatureVec;
    }

    public String getSourceArtifactColName() {
        return sourceArtifactIdColName;
    }

    public String getTargetArtifactColName() {
        return targetArtifactIdColName;
    }

    public SparkTraceTask setSourceArtifactIdColName(String idColName) {
        sourceArtifactIdColName = idColName;
        return this;
    }

    public SparkTraceTask setTargetArtifactColName(String idColName) {
        targetArtifactIdColName = idColName;
        return this;
    }

}
